//=====================================================================================================================
// Решение: CubeXPlatform
// Проект: CubeXWindows
// Раздел: Модуль пользовательского интерфейса
// Подраздел: Общие элементы управления
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPropertyModelValue.cs
*		Модель отображения свойства объекта к конкретными типом значения свойства.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 24.05.2020
//=====================================================================================================================
using System;
using System.Collections;
using System.ComponentModel;
using System.Reflection;
//---------------------------------------------------------------------------------------------------------------------
using CubeX.Core;
//=====================================================================================================================
namespace CubeX
{
	namespace Windows
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup WindowsWPFControlsData
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Модель отображения свойства объекта к конкретными типом значения свойства
		/// </summary>
		/// <typeparam name="TValue">Тип значения свойства</typeparam>
		//-------------------------------------------------------------------------------------------------------------
		public class PropertyModel<TValue> : CPropertyModelBase, IComparable<PropertyModel<TValue>>
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			protected static PropertyChangedEventArgs PropertyArgsValue = new PropertyChangedEventArgs(nameof(Value));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			protected internal TValue mValue;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значение свойства
			/// </summary>
			public TValue Value
			{
				get { return (mValue); }
				set
				{
					// Произошло изменение свойства со стороны инспектора свойств
					mValue = value;
					if (mInfo != null && mInfo.CanWrite)
					{
						// Обновляем значение свойства у объекта
						mInfo.SetValue(mInstance, mValue, null);
					}
				}
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public PropertyModel()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="property_info">Метаданные свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public PropertyModel(PropertyInfo property_info)
				: base(property_info)
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="property_info">Метаданные свойства</param>
			/// <param name="property_type">Допустимый тип свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public PropertyModel(PropertyInfo property_info, TPropertyType property_type)
				: base(property_info, property_type)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="property_info">Метаданные свойства</param>
			/// <param name="property_desc">Описание свойства</param>
			/// <param name="property_type">Допустимый тип свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public PropertyModel(PropertyInfo property_info, CPropertyDesc property_desc, TPropertyType property_type)
				: base(property_info, property_desc, property_type)
			{

			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сравнение объектов для упорядочивания
			/// </summary>
			/// <param name="other">Сравниваемый объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public Int32 CompareTo(PropertyModel<TValue> other)
			{
				return (base.CompareTo(other));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Краткое наименование финасового инструмента</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (DisplayName);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка значения напрямую
			/// </summary>
			/// <remarks>
			/// В данном случае мы должны уведомить как инспектор свойств и сам объект 
			/// </remarks>
			/// <param name="value">Значение свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public override void SetValue(System.Object value)
			{
				// Устанавливаем значение свойства объекта
				if (mInfo != null)
				{
					mInfo.SetValue(mInstance, value, null);
				}

				// Уведомляем инспектор свойств
				mValue = (TValue)value;
				NotifyPropertyChanged(PropertyArgsValue);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка нового объекта
			/// </summary>
			/// <remarks>
			/// В данном случае мы должны уведомить инспектор свойств
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			protected override void SetInstance()
			{
				if (mInfo != null)
				{
					// Получаем актуальное значение с объекта
					mValue = (TValue)mInfo.GetValue(mInstance);

					// Информируем
					NotifyPropertyChanged(PropertyArgsValue);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка на значение что оно из списка значений
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void CheckIsValueFromList()
			{
				mIsValueFromList = false;

				if (IsListValues)
				{
					IEnumerable enumerable = CPropertyDesc.GetValue(mListValues, mListValuesMemberName,
						mListValuesMemberType, mInstance) as IEnumerable;
					foreach (var item in enumerable)
					{
						if(item.Equals(Value))
						{
							mIsValueFromList = true;
							break;
						}
					}
				}

				NotifyPropertyChanged(PropertyArgsIsValueFromList);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обработчик события изменения свойства со стороны объекта
			/// </summary>
			/// <remarks>
			/// В данном случае мы должны уведомить инспектор свойств
			/// </remarks>
			/// <param name="sender">Источник события</param>
			/// <param name="args">Аргументы события</param>
			//---------------------------------------------------------------------------------------------------------
			protected override void OnPropertyChangedFromInstance(Object sender, PropertyChangedEventArgs args)
			{
				if (mInfo != null && mInfo.Name == args.PropertyName )
				{
					// Получаем актуальное значение с объекта
					mValue = (TValue)mInfo.GetValue(mInstance);

					// Информируем
					NotifyPropertyChanged(PropertyArgsValue);
				}
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================