//=====================================================================================================================
// Проект: CubeXWindows
// Раздел: Модуль работы с WPF
// Подраздел: Элементы интерфейса
// Группа: Элементы для работы с данными
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXPropertyModelEnum.cs
*		Модель отображения свойства объекта типа перечисления.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 24.05.2020
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
//---------------------------------------------------------------------------------------------------------------------
using CubeX.Core;
//=====================================================================================================================
namespace CubeX
{
	namespace Windows
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup WindowsWPFControlsData
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Модель отображения свойства объекта типа перечисления
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CPropertyModelEnum : PropertyModel<Enum>
		{
			#region ======================================= ДАННЫЕ ====================================================
			internal ArrayList mEnumValues;
			internal List<String> mEnumNames;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Значения перечисления
			/// </summary>
			public ArrayList EnumValues
			{
				get { return (mEnumValues); }
			}

			/// <summary>
			/// Имена перечисления
			/// </summary>
			public List<String> EnumNames
			{
				get { return (mEnumNames); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CPropertyModelEnum()
			{
				mPropertyType = TPropertyType.Enum;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="property_info">Метаданные свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public CPropertyModelEnum(PropertyInfo property_info)
				: base(property_info, TPropertyType.Enum)
			{
				mEnumValues = new ArrayList(Enum.GetValues(property_info.PropertyType));
				mEnumNames = new List<String>(Enum.GetNames(property_info.PropertyType));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="property_info">Метаданные свойства</param>
			/// <param name="property_desc">Описание свойства</param>
			//---------------------------------------------------------------------------------------------------------
			public CPropertyModelEnum(PropertyInfo property_info, CPropertyDesc property_desc)
				: base(property_info, property_desc, TPropertyType.Enum)
			{
				mEnumValues = new ArrayList(Enum.GetValues(property_info.PropertyType));
				mEnumNames = new List<String>(Enum.GetNames(property_info.PropertyType));
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================