//=====================================================================================================================
// Проект: CubeXWindows
// Раздел: Модуль работы с WPF
// Подраздел: Методы расширения
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file CubeXWindowsExtensionVector.cs
*		Методы расширения для работы с типом Vector.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 24.05.2020
//=====================================================================================================================
using System;
using System.ComponentModel;
using System.Globalization;
using System.Windows;
//---------------------------------------------------------------------------------------------------------------------
using CubeX.Core;
//=====================================================================================================================
namespace CubeX
{
	namespace Windows
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup WindowsWPFExtension
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс реализующий методы расширения для типа <see cref="Vector"/>
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XExtensionWindowsVector
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Сериализация вектора в строку
			/// </summary>
			/// <param name="vector">Двухмерный вектор</param>
			/// <returns>Строка данных</returns>
			//---------------------------------------------------------------------------------------------------------
			public static String SerializeToString(this Vector vector)
			{
				return (String.Format("{0};{1}", vector.X, vector.Y));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Десереализация двухмерного вектора из строки
			/// </summary>
			/// <param name="data">Строка данных</param>
			/// <returns>Двухмерный вектор</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Vector DeserializeFromString(String data)
			{
				Vector vector = new Vector();
				String[] vector_data = data.Split(';');
				vector.X = (XNumbers.ParseDouble(vector_data[0]));
				vector.Y = (XNumbers.ParseDouble(vector_data[1]));
				return (vector);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Аппроксимация равенства двухмерных векторов
			/// </summary>
			/// <param name="vector">Первое значение</param>
			/// <param name="other">Второе значение</param>
			/// <param name="epsilon">Погрешность</param>
			/// <returns>Статус равенства значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean Approximately(this Vector vector, Vector other, Double epsilon)
			{
				if ((Math.Abs(vector.X - other.X) < epsilon) && (Math.Abs(vector.Y - other.Y) < epsilon))
				{
					return (true);
				}

				return (false);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Аппроксимация равенства двухмерных векторов
			/// </summary>
			/// <param name="vector">Первое значение</param>
			/// <param name="other">Второе значение</param>
			/// <returns>Статус равенства значений</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Boolean Approximately(this Vector vector, Vector other)
			{
				if ((Math.Abs(vector.X - other.X) < 0.001) && (Math.Abs(vector.Y - other.Y) < 0.001))
				{
					return (true);
				}

				return (false);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование в вектор Maths.Vector2D
			/// </summary>
			/// <param name="vector">Вектор</param>
			/// <returns>Вектор</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Maths.Vector2D ToVector2D(this Vector vector)
			{
				return (new Maths.Vector2D(vector.X, vector.Y));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование в вектор Maths.Vector2Df
			/// </summary>
			/// <param name="vector">Вектор</param>
			/// <returns>Вектор</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Maths.Vector2Df ToVector2Df(this Vector vector)
			{
				return (new Maths.Vector2Df((Single)vector.X, (Single)vector.Y));
			}
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================